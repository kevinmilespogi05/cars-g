name: Advanced Keep Alive with Monitoring

on:
  schedule:
    # Multiple schedules for redundancy
    - cron: '*/5 * * * *'    # Every 5 minutes
    - cron: '2,7,12,17,22,27,32,37,42,47,52,57 * * * *'  # Offset by 2 minutes
  workflow_dispatch:
    inputs:
      target:
        description: 'Target to ping (backend/frontend/both)'
        required: false
        default: 'both'

env:
  BACKEND_URL: https://cars-g-api.onrender.com
  FRONTEND_URL: https://cars-g.vercel.app

jobs:
  keep-alive-backend:
    runs-on: ubuntu-latest
    if: github.event.inputs.target != 'frontend'
    
    steps:
    - name: Comprehensive Backend Ping
      id: backend-ping
      run: |
        echo "üöÄ Starting comprehensive backend keep-alive..."
        
        # Function to ping with retry
        ping_with_retry() {
          local url=$1
          local name=$2
          local max_attempts=3
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts for $name..."
            
            response=$(curl -s -w "%{http_code}:%{time_total}" -o /tmp/response_$attempt.txt "$url" --max-time 30)
            http_code=$(echo $response | cut -d: -f1)
            time_total=$(echo $response | cut -d: -f2)
            
            if [ "$http_code" = "200" ]; then
              echo "‚úÖ $name successful (HTTP $http_code, ${time_total}s)"
              cat /tmp/response_$attempt.txt | head -3
              return 0
            else
              echo "‚ö†Ô∏è  $name failed (HTTP $http_code, ${time_total}s)"
              if [ $attempt -eq $max_attempts ]; then
                cat /tmp/response_$attempt.txt
              fi
            fi
            
            attempt=$((attempt + 1))
            sleep 2
          done
          
          return 1
        }
        
        # Ping multiple endpoints
        endpoints=(
          "$BACKEND_URL/health:Health Check"
          "$BACKEND_URL/api/status:Status API"
          "$BACKEND_URL/api/reports?limit=1:Reports API"
        )
        
        success_count=0
        total_count=${#endpoints[@]}
        
        for endpoint in "${endpoints[@]}"; do
          url=$(echo $endpoint | cut -d: -f1)
          name=$(echo $endpoint | cut -d: -f2)
          
          if ping_with_retry "$url" "$name"; then
            success_count=$((success_count + 1))
          fi
          
          echo ""
        done
        
        echo "üìä Backend ping summary: $success_count/$total_count endpoints successful"
        
        # Set output for next steps
        echo "success_count=$success_count" >> $GITHUB_OUTPUT
        echo "total_count=$total_count" >> $GITHUB_OUTPUT
        
        if [ $success_count -eq 0 ]; then
          echo "‚ùå All backend pings failed!"
          exit 1
        fi

    - name: Check Backend Performance
      run: |
        echo "‚ö° Checking backend performance..."
        
        # Measure response time for health check
        time_result=$(curl -w "@-" -o /dev/null -s "$BACKEND_URL/health" <<< '
        time_namelookup:  %{time_namelookup}s
        time_connect:     %{time_connect}s
        time_appconnect:  %{time_appconnect}s
        time_pretransfer: %{time_pretransfer}s
        time_redirect:    %{time_redirect}s
        time_starttransfer: %{time_starttransfer}s
        time_total:       %{time_total}s
        http_code:        %{http_code}
        ')
        
        echo "$time_result"
        
        # Extract total time and check if it's a cold start
        total_time=$(echo "$time_result" | grep "time_total" | awk '{print $2}' | sed 's/s//')
        
        if (( $(echo "$total_time > 5.0" | bc -l) )); then
          echo "ü•∂ Potential cold start detected (${total_time}s response time)"
        else
          echo "üî• Server is warm (${total_time}s response time)"
        fi

  keep-alive-frontend:
    runs-on: ubuntu-latest
    if: github.event.inputs.target != 'backend'
    
    steps:
    - name: Frontend Keep Alive
      run: |
        echo "üåê Pinging frontend..."
        
        response=$(curl -s -w "%{http_code}:%{time_total}" -o /dev/null "$FRONTEND_URL" --max-time 30)
        http_code=$(echo $response | cut -d: -f1)
        time_total=$(echo $response | cut -d: -f2)
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Frontend ping successful (HTTP $http_code, ${time_total}s)"
        else
          echo "‚ö†Ô∏è  Frontend ping failed (HTTP $http_code, ${time_total}s)"
        fi

  report-status:
    runs-on: ubuntu-latest
    needs: [keep-alive-backend, keep-alive-frontend]
    if: always()
    
    steps:
    - name: Generate Status Report
      run: |
        echo "üìã Keep-Alive Status Report"
        echo "=========================="
        echo "Timestamp: $(date -u)"
        echo "Trigger: ${{ github.event_name }}"
        
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "Schedule: ${{ github.event.schedule }}"
        fi
        
        echo ""
        echo "Job Results:"
        echo "- Backend: ${{ needs.keep-alive-backend.result }}"
        echo "- Frontend: ${{ needs.keep-alive-frontend.result }}"
        
        if [ "${{ needs.keep-alive-backend.result }}" = "success" ]; then
          echo "‚úÖ Backend is alive and responding"
        else
          echo "‚ùå Backend ping failed - check logs"
        fi
        
        if [ "${{ needs.keep-alive-frontend.result }}" = "success" ]; then
          echo "‚úÖ Frontend is alive and responding"
        else
          echo "‚ùå Frontend ping failed - check logs"
        fi
