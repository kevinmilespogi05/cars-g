#!/usr/bin/env node

/**
 * Test chat push notifications via socket connection
 * This script connects to the server via socket and sends a message to trigger push notifications
 */

import { createClient } from '@supabase/supabase-js';
import { io } from 'socket.io-client';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing required environment variables:');
  console.error('   VITE_SUPABASE_URL:', !!supabaseUrl);
  console.error('   SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey);
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testSocketPushNotification() {
  console.log('üß™ Testing Chat Push Notifications via Socket Connection...\n');

  try {
    // Get test users
    const { data: users, error: usersError } = await supabase
      .from('profiles')
      .select('id, username, role')
      .in('role', ['user', 'admin'])
      .limit(2);

    if (usersError || !users || users.length < 2) {
      console.error('‚ùå Need at least 2 users (user and admin)');
      return;
    }

    const testUser = users.find(u => u.role === 'user');
    const adminUser = users.find(u => u.role === 'admin');

    if (!testUser || !adminUser) {
      console.error('‚ùå Need both user and admin accounts');
      return;
    }

    console.log(`üë§ Test User: ${testUser.username} (${testUser.id})`);
    console.log(`üë®‚Äçüíº Admin User: ${adminUser.username} (${adminUser.id})`);

    // Create a test push subscription for the admin user
    const testToken = 'test-fcm-token-socket-' + Date.now();
    console.log('\nüì± Creating test push subscription for admin...');
    
    const { data: subscription, error: subError } = await supabase
      .from('push_subscriptions')
      .insert({
        user_id: adminUser.id,
        token: testToken,
        platform: 'web',
        created_at: new Date().toISOString()
      })
      .select()
      .single();

    if (subError) {
      console.error('‚ùå Failed to create push subscription:', subError);
      return;
    }

    console.log('‚úÖ Test push subscription created');
    console.log(`   User: ${subscription.user_id}`);
    console.log(`   Token: ${subscription.token.substring(0, 20)}...`);

    // Connect to socket server
    console.log('\nüîå Connecting to socket server...');
    const socket = io('http://localhost:3001', {
      transports: ['websocket'],
      timeout: 10000
    });

    return new Promise((resolve, reject) => {
      let testCompleted = false;

      socket.on('connect', async () => {
        console.log('‚úÖ Connected to socket server');

        try {
          // Create a simple JWT token for authentication
          // In a real scenario, this would be generated by the auth system
          const jwt = await import('jsonwebtoken');
          const jwtSecret = process.env.JWT_SECRET || 'your-jwt-secret';
          
          const token = jwt.default.sign(
            { 
              userId: testUser.id, 
              type: 'access',
              role: testUser.role 
            }, 
            jwtSecret, 
            { expiresIn: '1h' }
          );

          console.log('üîê Authenticating with JWT token...');
          
          // Authenticate with the server
          socket.emit('authenticate', { 
            token: token,
            userId: testUser.id,
            userRole: testUser.role
          });

        } catch (authError) {
          console.error('‚ùå Authentication error:', authError);
          reject(authError);
        }
      });

      socket.on('authenticated', () => {
        console.log('‚úÖ Socket authenticated successfully');
        
        // Join admin chat
        console.log('üìû Joining admin chat...');
        socket.emit('join_admin_chat', { adminId: adminUser.id });

        // Wait a moment then send test message
        setTimeout(() => {
          console.log('üì§ Sending test message via socket...');
          socket.emit('send_message', {
            message: 'Test socket message for push notification - ' + new Date().toISOString(),
            receiverId: 'admin-placeholder' // This should trigger admin notification
          });
        }, 2000);
      });

      socket.on('message_sent', (message) => {
        console.log('‚úÖ Message sent successfully via socket');
        console.log(`   Message ID: ${message.id}`);
        console.log(`   Sender: ${message.sender?.username}`);
        console.log(`   Receiver: ${message.receiver?.username}`);
        
        // Wait for push notification to be processed
        setTimeout(async () => {
          console.log('\nüîî Checking for push notification logs...');
          console.log('üìù Check the server console for push notification attempts');
          console.log('   Look for messages like:');
          console.log('   - "üîî Attempting to send chat push notification..."');
          console.log('   - "üì± Found X push subscription(s) for user..."');
          console.log('   - "‚úÖ Push notification sent successfully..."');
          
          // Clean up
          console.log('\nüßπ Cleaning up test data...');
          await supabase
            .from('push_subscriptions')
            .delete()
            .eq('token', testToken);
          
          console.log('‚úÖ Test data cleaned up');
          
          if (!testCompleted) {
            testCompleted = true;
            console.log('\nüéâ Socket push notification test completed!');
            console.log('\nüìã Summary:');
            console.log('   ‚úÖ Socket connection established');
            console.log('   ‚úÖ JWT authentication successful');
            console.log('   ‚úÖ Message sent via socket');
            console.log('   ‚úÖ Push notification function called');
            console.log('\nüí° Check the server console logs to see if push notification was sent');
            resolve();
          }
        }, 3000);
      });

      socket.on('chat_error', (error) => {
        console.error('‚ùå Chat error:', error);
        if (!testCompleted) {
          testCompleted = true;
          reject(new Error(`Chat error: ${error}`));
        }
      });

      socket.on('connect_error', (error) => {
        console.error('‚ùå Socket connection error:', error);
        if (!testCompleted) {
          testCompleted = true;
          reject(error);
        }
      });

      // Timeout after 30 seconds
      setTimeout(() => {
        if (!testCompleted) {
          testCompleted = true;
          console.log('\n‚è∞ Test timed out after 30 seconds');
          console.log('üìù Check server logs for push notification attempts');
          resolve();
        }
      }, 30000);
    });

  } catch (error) {
    console.error('‚ùå Test failed:', error);
    throw error;
  }
}

// Run the test
testSocketPushNotification()
  .then(() => {
    console.log('\n‚úÖ Test completed successfully');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  });
